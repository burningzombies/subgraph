// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class BurnedReflectionDivided extends ethereum.Event {
  get params(): BurnedReflectionDivided__Params {
    return new BurnedReflectionDivided__Params(this);
  }
}

export class BurnedReflectionDivided__Params {
  _event: BurnedReflectionDivided;

  constructor(event: BurnedReflectionDivided) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class BurningZombiesERC721 extends ethereum.SmartContract {
  static bind(address: Address): BurningZombiesERC721 {
    return new BurningZombiesERC721("BurningZombiesERC721", address);
  }

  MAX_SUPPLY(): BigInt {
    let result = super.call("MAX_SUPPLY", "MAX_SUPPLY():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MAX_SUPPLY(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MAX_SUPPLY", "MAX_SUPPLY():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_TOKEN_PER_TX(): BigInt {
    let result = super.call(
      "MAX_TOKEN_PER_TX",
      "MAX_TOKEN_PER_TX():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_TOKEN_PER_TX(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_TOKEN_PER_TX",
      "MAX_TOKEN_PER_TX():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_TOKEN_PER_WALLET(): BigInt {
    let result = super.call(
      "MAX_TOKEN_PER_WALLET",
      "MAX_TOKEN_PER_WALLET():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_TOKEN_PER_WALLET(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_TOKEN_PER_WALLET",
      "MAX_TOKEN_PER_WALLET():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  burnedReflectionBalance(): BigInt {
    let result = super.call(
      "burnedReflectionBalance",
      "burnedReflectionBalance():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_burnedReflectionBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "burnedReflectionBalance",
      "burnedReflectionBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculateReflectionShare(): BigInt {
    let result = super.call(
      "calculateReflectionShare",
      "calculateReflectionShare():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_calculateReflectionShare(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateReflectionShare",
      "calculateReflectionShare():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentTokenId(): BigInt {
    let result = super.call("currentTokenId", "currentTokenId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_currentTokenId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentTokenId",
      "currentTokenId():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentTokenPrice(): BigInt {
    let result = super.call(
      "currentTokenPrice",
      "currentTokenPrice():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_currentTokenPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentTokenPrice",
      "currentTokenPrice():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getReflectionBalance(tokenId: BigInt): BigInt {
    let result = super.call(
      "getReflectionBalance",
      "getReflectionBalance(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return result[0].toBigInt();
  }

  try_getReflectionBalance(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getReflectionBalance",
      "getReflectionBalance(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getReflectionBalances(): BigInt {
    let result = super.call(
      "getReflectionBalances",
      "getReflectionBalances():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getReflectionBalances(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getReflectionBalances",
      "getReflectionBalances():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isSaleActive(): boolean {
    let result = super.call("isSaleActive", "isSaleActive():(bool)", []);

    return result[0].toBoolean();
  }

  try_isSaleActive(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isSaleActive", "isSaleActive():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  minterOf(tokenId: BigInt): Address {
    let result = super.call("minterOf", "minterOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_minterOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("minterOf", "minterOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  priceBase(): BigInt {
    let result = super.call("priceBase", "priceBase():(uint256)", []);

    return result[0].toBigInt();
  }

  try_priceBase(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("priceBase", "priceBase():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  priceStep(): BigInt {
    let result = super.call("priceStep", "priceStep():(uint256)", []);

    return result[0].toBigInt();
  }

  try_priceStep(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("priceStep", "priceStep():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  provenance(): string {
    let result = super.call("provenance", "provenance():(string)", []);

    return result[0].toString();
  }

  try_provenance(): ethereum.CallResult<string> {
    let result = super.tryCall("provenance", "provenance():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  reflectionBalance(): BigInt {
    let result = super.call(
      "reflectionBalance",
      "reflectionBalance():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_reflectionBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "reflectionBalance",
      "reflectionBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  reflectionBase(): BigInt {
    let result = super.call("reflectionBase", "reflectionBase():(uint256)", []);

    return result[0].toBigInt();
  }

  try_reflectionBase(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "reflectionBase",
      "reflectionBase():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  reflectionStep(): BigInt {
    let result = super.call("reflectionStep", "reflectionStep():(uint256)", []);

    return result[0].toBigInt();
  }

  try_reflectionStep(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "reflectionStep",
      "reflectionStep():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  saleDuration(): BigInt {
    let result = super.call("saleDuration", "saleDuration():(uint256)", []);

    return result[0].toBigInt();
  }

  try_saleDuration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("saleDuration", "saleDuration():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  saleStartsAt(): BigInt {
    let result = super.call("saleStartsAt", "saleStartsAt():(uint256)", []);

    return result[0].toBigInt();
  }

  try_saleStartsAt(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("saleStartsAt", "saleStartsAt():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  segmentSize(): BigInt {
    let result = super.call("segmentSize", "segmentSize():(uint256)", []);

    return result[0].toBigInt();
  }

  try_segmentSize(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("segmentSize", "segmentSize():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenByIndex(index: BigInt): BigInt {
    let result = super.call("tokenByIndex", "tokenByIndex(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);

    return result[0].toBigInt();
  }

  try_tokenByIndex(index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenByIndex",
      "tokenByIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenOfOwnerByIndex(owner: Address, index: BigInt): BigInt {
    let result = super.call(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toBigInt();
  }

  try_tokenOfOwnerByIndex(
    owner: Address,
    index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenPrice(tokenId: BigInt): BigInt {
    let result = super.call("tokenPrice", "tokenPrice(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toBigInt();
  }

  try_tokenPrice(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tokenPrice", "tokenPrice(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalDividend(): BigInt {
    let result = super.call("totalDividend", "totalDividend():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalDividend(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalDividend",
      "totalDividend():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get baseURI(): string {
    return this._call.inputValues[0].value.toString();
  }

  get start(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get duration(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get neonMonstersContractAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get neonMonstersMintersContractAddress(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class ClaimRewardCall extends ethereum.Call {
  get inputs(): ClaimRewardCall__Inputs {
    return new ClaimRewardCall__Inputs(this);
  }

  get outputs(): ClaimRewardCall__Outputs {
    return new ClaimRewardCall__Outputs(this);
  }
}

export class ClaimRewardCall__Inputs {
  _call: ClaimRewardCall;

  constructor(call: ClaimRewardCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ClaimRewardCall__Outputs {
  _call: ClaimRewardCall;

  constructor(call: ClaimRewardCall) {
    this._call = call;
  }
}

export class ClaimRewardsCall extends ethereum.Call {
  get inputs(): ClaimRewardsCall__Inputs {
    return new ClaimRewardsCall__Inputs(this);
  }

  get outputs(): ClaimRewardsCall__Outputs {
    return new ClaimRewardsCall__Outputs(this);
  }
}

export class ClaimRewardsCall__Inputs {
  _call: ClaimRewardsCall;

  constructor(call: ClaimRewardsCall) {
    this._call = call;
  }
}

export class ClaimRewardsCall__Outputs {
  _call: ClaimRewardsCall;

  constructor(call: ClaimRewardsCall) {
    this._call = call;
  }
}

export class DivideUnclaimedTokenReflectionCall extends ethereum.Call {
  get inputs(): DivideUnclaimedTokenReflectionCall__Inputs {
    return new DivideUnclaimedTokenReflectionCall__Inputs(this);
  }

  get outputs(): DivideUnclaimedTokenReflectionCall__Outputs {
    return new DivideUnclaimedTokenReflectionCall__Outputs(this);
  }
}

export class DivideUnclaimedTokenReflectionCall__Inputs {
  _call: DivideUnclaimedTokenReflectionCall;

  constructor(call: DivideUnclaimedTokenReflectionCall) {
    this._call = call;
  }

  get numberOfTokens(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DivideUnclaimedTokenReflectionCall__Outputs {
  _call: DivideUnclaimedTokenReflectionCall;

  constructor(call: DivideUnclaimedTokenReflectionCall) {
    this._call = call;
  }
}

export class MintTokenCall extends ethereum.Call {
  get inputs(): MintTokenCall__Inputs {
    return new MintTokenCall__Inputs(this);
  }

  get outputs(): MintTokenCall__Outputs {
    return new MintTokenCall__Outputs(this);
  }
}

export class MintTokenCall__Inputs {
  _call: MintTokenCall;

  constructor(call: MintTokenCall) {
    this._call = call;
  }

  get numberOfTokens(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class MintTokenCall__Outputs {
  _call: MintTokenCall;

  constructor(call: MintTokenCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetBaseURICall extends ethereum.Call {
  get inputs(): SetBaseURICall__Inputs {
    return new SetBaseURICall__Inputs(this);
  }

  get outputs(): SetBaseURICall__Outputs {
    return new SetBaseURICall__Outputs(this);
  }
}

export class SetBaseURICall__Inputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }

  get baseURI(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetBaseURICall__Outputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }
}

export class SetNeonMonstersContractAddressCall extends ethereum.Call {
  get inputs(): SetNeonMonstersContractAddressCall__Inputs {
    return new SetNeonMonstersContractAddressCall__Inputs(this);
  }

  get outputs(): SetNeonMonstersContractAddressCall__Outputs {
    return new SetNeonMonstersContractAddressCall__Outputs(this);
  }
}

export class SetNeonMonstersContractAddressCall__Inputs {
  _call: SetNeonMonstersContractAddressCall;

  constructor(call: SetNeonMonstersContractAddressCall) {
    this._call = call;
  }

  get address_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetNeonMonstersContractAddressCall__Outputs {
  _call: SetNeonMonstersContractAddressCall;

  constructor(call: SetNeonMonstersContractAddressCall) {
    this._call = call;
  }
}

export class SetNeonMonstersMintersContractAddressCall extends ethereum.Call {
  get inputs(): SetNeonMonstersMintersContractAddressCall__Inputs {
    return new SetNeonMonstersMintersContractAddressCall__Inputs(this);
  }

  get outputs(): SetNeonMonstersMintersContractAddressCall__Outputs {
    return new SetNeonMonstersMintersContractAddressCall__Outputs(this);
  }
}

export class SetNeonMonstersMintersContractAddressCall__Inputs {
  _call: SetNeonMonstersMintersContractAddressCall;

  constructor(call: SetNeonMonstersMintersContractAddressCall) {
    this._call = call;
  }

  get address_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetNeonMonstersMintersContractAddressCall__Outputs {
  _call: SetNeonMonstersMintersContractAddressCall;

  constructor(call: SetNeonMonstersMintersContractAddressCall) {
    this._call = call;
  }
}

export class SetProvenanceCall extends ethereum.Call {
  get inputs(): SetProvenanceCall__Inputs {
    return new SetProvenanceCall__Inputs(this);
  }

  get outputs(): SetProvenanceCall__Outputs {
    return new SetProvenanceCall__Outputs(this);
  }
}

export class SetProvenanceCall__Inputs {
  _call: SetProvenanceCall;

  constructor(call: SetProvenanceCall) {
    this._call = call;
  }

  get _provenance(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetProvenanceCall__Outputs {
  _call: SetProvenanceCall;

  constructor(call: SetProvenanceCall) {
    this._call = call;
  }
}

export class SetReflectionDynamicsCall extends ethereum.Call {
  get inputs(): SetReflectionDynamicsCall__Inputs {
    return new SetReflectionDynamicsCall__Inputs(this);
  }

  get outputs(): SetReflectionDynamicsCall__Outputs {
    return new SetReflectionDynamicsCall__Outputs(this);
  }
}

export class SetReflectionDynamicsCall__Inputs {
  _call: SetReflectionDynamicsCall;

  constructor(call: SetReflectionDynamicsCall) {
    this._call = call;
  }

  get segmentSize_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get reflectionBase_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get reflectionStep_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get priceBase_(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get priceStep_(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class SetReflectionDynamicsCall__Outputs {
  _call: SetReflectionDynamicsCall;

  constructor(call: SetReflectionDynamicsCall) {
    this._call = call;
  }
}

export class SetSaleDurationCall extends ethereum.Call {
  get inputs(): SetSaleDurationCall__Inputs {
    return new SetSaleDurationCall__Inputs(this);
  }

  get outputs(): SetSaleDurationCall__Outputs {
    return new SetSaleDurationCall__Outputs(this);
  }
}

export class SetSaleDurationCall__Inputs {
  _call: SetSaleDurationCall;

  constructor(call: SetSaleDurationCall) {
    this._call = call;
  }

  get duration(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetSaleDurationCall__Outputs {
  _call: SetSaleDurationCall;

  constructor(call: SetSaleDurationCall) {
    this._call = call;
  }
}

export class SetSaleStartTimeCall extends ethereum.Call {
  get inputs(): SetSaleStartTimeCall__Inputs {
    return new SetSaleStartTimeCall__Inputs(this);
  }

  get outputs(): SetSaleStartTimeCall__Outputs {
    return new SetSaleStartTimeCall__Outputs(this);
  }
}

export class SetSaleStartTimeCall__Inputs {
  _call: SetSaleStartTimeCall;

  constructor(call: SetSaleStartTimeCall) {
    this._call = call;
  }

  get timestamp(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetSaleStartTimeCall__Outputs {
  _call: SetSaleStartTimeCall;

  constructor(call: SetSaleStartTimeCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
